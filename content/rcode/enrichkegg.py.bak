import os
import subprocess
import tempfile
import streamlit as st
import pandas as pd

from src.common.common import page_setup

params = page_setup()

st.title("Enrichkegg")

# Í≥†Ï†ï Í≤ΩÎ°ú
INPUT_ROOT = "/data/Deg"
OUTPUT_ROOT = "/data/Enrichkegg"
COMBO_NAMES_PATH = "/data/Deg/combo_names.rds"
FILE_NAME = "filtered_gene_list.csv"  # Í≥†Ï†ïÍ∞í

# ------------------ Main Tab ------------------
main_tabs = st.tabs(["üß¨ KEGG Enrichment"])
with main_tabs[0]:
    # ------------------ Sub Tabs ------------------
    sub_tabs = st.tabs(["‚öôÔ∏è Configure", "‚ñ∂Ô∏è Run", "üìä Results", "‚¨áÔ∏è Download"])
    tab_config, tab_run, tab_results, tab_download = sub_tabs

    # ------------------ Configure ÌÉ≠ ------------------
    with tab_config:
        p_cut = st.number_input("p-value cutoff", min_value=0.0, max_value=1.0, value=0.9, step=0.05)
        orgDb = st.text_input("OrgDb for conversion (e.g., org.Hs.eg.db)", "org.Hs.eg.db")

        if st.button("Save Configuration"):
            st.session_state["kegg_config"] = {
                "orgDb": orgDb,
                "p_cut": p_cut
            }
            st.success("Configuration saved!")

    # ------------------ Run ÌÉ≠ ------------------
    with tab_run:
        if "kegg_config" not in st.session_state:
            st.warning("‚ö†Ô∏è Please configure parameters first in the 'Configure' tab.")
        else:
            if st.button("Run KEGG Analysis"):
                cfg = st.session_state["kegg_config"]

                # R Ïä§ÌÅ¨Î¶ΩÌä∏ ÏûëÏÑ±
                with tempfile.NamedTemporaryFile(mode="w", suffix=".R", delete=False, encoding="utf-8") as tmp_r:
                    r_script_path = tmp_r.name
                    tmp_r.write(f"""
library(clusterProfiler)
library({cfg['orgDb']})
library(readr)
library(dplyr)

run_enrich_kegg_min <- function(input_root,
                                output_root,
                                combo_names,
                                file_name     = "{FILE_NAME}",
                                p_cut         = {cfg['p_cut']},
                                save_ekegg    = TRUE,
                                save_conv_tbl = FALSE) {{
  
  if (!dir.exists(output_root)) dir.create(output_root, recursive = TRUE)
  
  for (nm in combo_names) {{
    in_combo_dir <- file.path(input_root, nm)
    in_csv       <- file.path(in_combo_dir, file_name)
    if (!file.exists(in_csv)) next
    
    df <- tryCatch(read.csv(in_csv, check.names = FALSE, stringsAsFactors = FALSE),
                   error = function(e) NULL)
    if (is.null(df)) next
    
    sym_col <- grep("^(Geneid|Gene_Symbol|SYMBOL)$", names(df),
                    ignore.case = TRUE, value = TRUE)[1]
    if (is.na(sym_col)) next
    
    gene_symbols <- toupper(trimws(df[[sym_col]]))
    gene_symbols <- gene_symbols[!is.na(gene_symbols) & gene_symbols != ""]
    if (!length(gene_symbols)) next
    
    conv <- tryCatch(
      bitr(gene_symbols, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = {cfg['orgDb']}),
      error = function(e) NULL
    )
    if (is.null(conv) || !"ENTREZID" %in% names(conv)) next
    
    ids <- unique(na.omit(conv$ENTREZID))
    if (!length(ids)) next
    
    out_combo_dir <- file.path(output_root, nm)
    if (!dir.exists(out_combo_dir)) dir.create(out_combo_dir, recursive = TRUE)
    
    # Í≥†Ï†ïÍ∞íÏúºÎ°ú ÏßÄÏ†ï
    write_csv(conv, file.path(out_combo_dir, "SYMBOL_to_ENTREZ_conv.csv"))  # save_conv_tbl = TRUE
    ekegg <- tryCatch(
      enrichKEGG(gene = as.character(ids),
                 organism = "hsa",
                 pvalueCutoff = p_cut,
                 qvalueCutoff = 1),
      error = function(e) NULL
    )
    
    if (!is.null(ekegg) && nrow(as.data.frame(ekegg)) > 0) {{
      ekegg_readable <- tryCatch(
        setReadable(ekegg, OrgDb = {cfg['orgDb']}, keyType = "ENTREZID"),
        error = function(e) ekegg
      )
      
      write_csv(as.data.frame(ekegg_readable),
                file.path(out_combo_dir, "KEGG_result.csv"))
      
      saveRDS(ekegg_readable, file.path(out_combo_dir, "KEGG_ekegg.rds"))  # save_ekegg = TRUE
    }}
  }}
}}

combo_names <- readRDS("{COMBO_NAMES_PATH}")

run_enrich_kegg_min(
  input_root   = "{INPUT_ROOT}",
  output_root  = "{OUTPUT_ROOT}",
  combo_names  = combo_names,
  file_name    = "{FILE_NAME}",
  p_cut        = {cfg['p_cut']},
  save_ekegg   = TRUE,
  save_conv_tbl= FALSE
)
""")

                # Rscript Ïã§Ìñâ
                result = subprocess.run(
                    ["Rscript", r_script_path],
                    capture_output=True,
                    text=True,
                    encoding="utf-8"
                )

                st.session_state["kegg_log"] = result.stdout + "\n" + result.stderr

                if result.returncode == 0:
                    st.success("‚úÖ KEGG enrichment completed successfully!")
                else:
                    st.error("‚ùå Error occurred during KEGG enrichment. Please check the output files.")

    # ------------------ Results ÌÉ≠ ------------------
    with tab_results:
        if os.path.exists(OUTPUT_ROOT):
            all_results = []
            for root, dirs, files in os.walk(OUTPUT_ROOT):
                for f in files:
                    if f.endswith("KEGG_result.csv"):
                        fpath = os.path.join(root, f)
                        try:
                            df = pd.read_csv(fpath)
                            st.markdown(f"**{fpath}**")
                            st.dataframe(df.head(20))
                            all_results.append((fpath, df))
                        except Exception as e:
                            st.warning(f"Failed to read {fpath}: {e}")
            if not all_results:
                st.info("No KEGG_result.csv files found yet.")
        else:
            st.warning("‚ö†Ô∏è Output directory does not exist.")

    # ------------------ Download ÌÉ≠ ------------------
    with tab_download:
        if os.path.exists(OUTPUT_ROOT):
            for root, dirs, files in os.walk(OUTPUT_ROOT):
                for f in files:
                    if f.endswith("KEGG_result.csv"):
                        fpath = os.path.join(root, f)
                        combo_name = os.path.basename(root)
                        try:
                            with open(fpath, "rb") as file:
                                st.download_button(
                                    label=f"‚¨áÔ∏è Download {combo_name} KEGG_result.csv",
                                    data=file,
                                    file_name=f"{combo_name}_KEGG_result.csv",
                                    mime="text/csv"
                                )
                        except Exception as e:
                            st.warning(f"Download failed for {fpath}: {e}")
        else:
            st.info("No results available for download yet.")
