import os
import subprocess
import tempfile
import streamlit as st

from src.common.common import page_setup

# ----------------- 페이지 세팅 -----------------
params = page_setup()

st.title("Enrichkegg dotplot")

input_root = "/data/Deg"
output_root = "/data/Enrichkegg"
combo_rds = "/data/Deg/combo_names.rds"
file_name = "filtered_gene_list.csv"

# ----------------- 메인 탭 -----------------
main_tabs = st.tabs(["KEGG Enrichment"])
with main_tabs[0]:
    # ----------------- 서브 탭 -----------------
    sub_tabs = st.tabs(["⚙️ Configure", "🚀 Run", "📊 Result", "⬇️ Download"])
    configure_tab, run_tab, result_tab, download_tab = sub_tabs

    # ----------------- Configure -----------------
    with configure_tab:
        show_category = st.number_input("Show Category", value=10, min_value=1)
        p_cut = st.number_input("p-value Cutoff", value=0.9, min_value=0.0, max_value=1.0, step=0.05)
        save_ekegg = st.checkbox("Save ekegg object (RDS)", value=True)
        save_conv_tbl = st.checkbox("Save conversion table", value=False)

        st.session_state["kegg_config"] = {
            "input_root": input_root,
            "output_root": output_root,
            "combo_rds": combo_rds,
            "file_name": file_name,
            "show_category": show_category,
            "p_cut": p_cut,
            "save_ekegg": save_ekegg,
            "save_conv_tbl": save_conv_tbl,
        }

    # ----------------- Run -----------------
    with run_tab:
        if st.button("Run Analysis"):
            cfg = st.session_state.get("kegg_config", {})
            os.makedirs(cfg["output_root"], exist_ok=True)

            # 임시 R 스크립트 작성
            with tempfile.NamedTemporaryFile(mode="w", suffix=".R", delete=False, encoding="utf-8") as tmp_r:
                r_script_path = tmp_r.name
                tmp_r.write(f"""
                library(clusterProfiler)
                library(org.Hs.eg.db)
                library(enrichplot)
                library(ggplot2)
                library(readr)
                library(dplyr)

                run_enrich_kegg_min <- function(input_root,
                                                output_root,
                                                combo_names,
                                                file_name     = "{cfg['file_name']}",
                                                showCategory  = {cfg['show_category']},
                                                p_cut         = {cfg['p_cut']},
                                                save_ekegg    = {str(cfg['save_ekegg']).upper()},
                                                save_conv_tbl = {str(cfg['save_conv_tbl']).upper()}) {{
                  if (!dir.exists(output_root)) dir.create(output_root, recursive = TRUE)
                  for (nm in combo_names) {{
                    in_combo_dir <- file.path(input_root, nm)
                    in_csv       <- file.path(in_combo_dir, file_name)
                    if (!file.exists(in_csv)) next
                    df <- tryCatch(read.csv(in_csv, check.names = FALSE, stringsAsFactors = FALSE),
                                   error = function(e) NULL)
                    if (is.null(df)) next
                    sym_col <- grep("^(Geneid|Gene_Symbol|SYMBOL)$", names(df),
                                    ignore.case = TRUE, value = TRUE)[1]
                    if (is.na(sym_col)) next
                    gene_symbols <- toupper(trimws(df[[sym_col]]))
                    gene_symbols <- gene_symbols[!is.na(gene_symbols) & gene_symbols != ""]
                    if (!length(gene_symbols)) next
                    conv <- tryCatch(
                      bitr(gene_symbols, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db),
                      error = function(e) NULL
                    )
                    if (is.null(conv) || !"ENTREZID" %in% names(conv)) next
                    ids <- unique(na.omit(conv$ENTREZID))
                    if (!length(ids)) next
                    out_combo_dir <- file.path(output_root, nm)
                    fig_dir       <- file.path(out_combo_dir, "figure")
                    if (!dir.exists(fig_dir)) dir.create(fig_dir, recursive = TRUE)
                    if (isTRUE(save_conv_tbl)) {{
                      write_csv(conv, file.path(out_combo_dir, "SYMBOL_to_ENTREZ_conv.csv"))
                    }}
                    ekegg <- tryCatch(
                      enrichKEGG(gene = as.character(ids),
                                 organism = "hsa",
                                 pvalueCutoff = p_cut,
                                 qvalueCutoff = 1),
                      error = function(e) NULL
                    )
                    if (!is.null(ekegg) && nrow(as.data.frame(ekegg)) > 0) {{
                      ekegg_readable <- tryCatch(
                        setReadable(ekegg, OrgDb = org.Hs.eg.db, keyType = "ENTREZID"),
                        error = function(e) ekegg
                      )
                      write_csv(as.data.frame(ekegg_readable),
                                file.path(out_combo_dir, "KEGG_result.csv"))
                      p <- dotplot(ekegg_readable, showCategory = showCategory,
                                   x = "GeneRatio", color = "p.adjust") +
                        ggtitle(sprintf("KEGG - %s", nm))
                      ggsave(file.path(fig_dir, "KEGG_dotplot.svg"), p, width = 8, height = 6)
                      if (isTRUE(save_ekegg)) {{
                        saveRDS(ekegg_readable, file.path(out_combo_dir, "KEGG_ekegg.rds"))
                      }}
                    }}
                  }}
                }}

                input_root  <- "{cfg['input_root']}"
                output_root <- "{cfg['output_root']}"
                combo_names <- readRDS("{cfg['combo_rds']}")

                run_enrich_kegg_min(
                  input_root   = input_root,
                  output_root  = output_root,
                  combo_names  = combo_names
                )
                """)

            # R 스크립트 실행
            result = subprocess.run(
                ["Rscript", r_script_path],
                capture_output=True,
                text=True,
                encoding="utf-8"
            )
            st.text_area("R Script Output", result.stdout + "\n" + result.stderr, height=300)

    # ----------------- Result -----------------
    with result_tab:
        if os.path.exists(output_root):
            for root, dirs, files in os.walk(output_root):
                for f in files:
                    if f.endswith(".svg"):  # svg 파일만 선택
                        svg_path = os.path.join(root, f)

                        # combo 폴더 이름 추출 (output_root 하위 폴더)
                        combo_name = os.path.relpath(root, output_root).split(os.sep)[0]

                        # combo 이름 굵게 표시
#                        st.markdown(f"**{combo_name}**")
                        st.markdown(f"<h5>{combo_name}</h5>", unsafe_allow_html=True)

                        # SVG 렌더링
                        with open(svg_path, "r", encoding="utf-8") as fh:
                            svg_content = fh.read()
                            st.image(svg_content, use_container_width=True)

    # ----------------- Download -----------------
    with download_tab:
        if os.path.exists(output_root):
            # 콤보 이름별로 svg 파일 묶기
            combo_svgs = {}
            for root, dirs, files in os.walk(output_root):
                for f in files:
                    if f.endswith(".svg"):
                        fpath = os.path.join(root, f)
                        combo_name = os.path.basename(os.path.dirname(root))  # 예: FC1.5_p0.01
                        combo_svgs[combo_name] = fpath   # 콤보별 대표 svg만 저장

            # 2열 배치
            cols = st.columns(2)
            for idx, (combo_name, svg_file) in enumerate(combo_svgs.items()):
                with cols[idx % 2]:  # 홀수/짝수 번갈아 2열 배치
                    with open(svg_file, "rb") as fh:
                        st.download_button(
                            label=f"⬇️ Download {combo_name}.svg",
                            data=fh,
                            file_name=f"{combo_name}.svg",
                            mime="image/svg+xml",
                            key=combo_name
                        )
